Error: DeckPile already exists12 April 2017 2:44:28.67444 pmVM: Mac OS - SmalltalkImage: Squeak5.1 [latest update: #16549]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/Daniel/Documents/College/Object Oriented Dev/CalculationSolitareTrusted Dir /Users/Daniel/Library/Application Support/Squeak/Untrusted Dir /Users/Daniel/Documents/Squeak/Browser(Object)>>error:	Receiver: a Browser	Arguments and temporary variables: 		aString: 	'DeckPile already exists'	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser: WastePile...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	Smalltalk		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	('as yet unclassified')		metaClassOrganizer: 	('as yet unclassified')		editSelection: 	#editClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Pile-Objects'		selectedClassName: 	#WastePileClass		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	'Pile subclass: #WastePileClass	instanceVariableNames: ''''	...etc...		metaClassDefinition: 	'WastePileClass class	instanceVariableNames: '''''Browser>>copyClass	Receiver: a Browser	Arguments and temporary variables: 		originalClass: 	WastePileClass		originalName: 	#WastePileClass		copysName: 	#DeckPile	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser: WastePile...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	Smalltalk		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	('as yet unclassified')		metaClassOrganizer: 	('as yet unclassified')		editSelection: 	#editClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Pile-Objects'		selectedClassName: 	#WastePileClass		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	'Pile subclass: #WastePileClass	instanceVariableNames: ''''	...etc...		metaClassDefinition: 	'WastePileClass class	instanceVariableNames: '''''Browser(StringHolder)>>perform:orSendTo:	Receiver: a Browser	Arguments and temporary variables: 		selector: 	#copyClass		otherTarget: 	a PluggableListMorphPlus(2733994)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser: WastePile...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	Smalltalk		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	('as yet unclassified')		metaClassOrganizer: 	('as yet unclassified')		editSelection: 	#editClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Pile-Objects'		selectedClassName: 	#WastePileClass		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	'Pile subclass: #WastePileClass	instanceVariableNames: ''''	...etc...		metaClassDefinition: 	'WastePileClass class	instanceVariableNames: '''''[] in MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(3879791)'copy class'	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	768@325 corner: 918@341		owner: 	a MenuMorph(1358653)		submorphs: 	#()		fullBounds: 	768@325 corner: 918@341		color: 	Color black		extension: 	a MorphExtension (2612855) [other:  (layoutProperties -> a LayoutPro...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'copy class'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Browser		selector: 	#perform:orSendTo:		arguments: 	{#copyClass . a PluggableListMorphPlus(2733994)}		icon: 	Form(16x1x8)BlockClosure>>ensure:	Receiver: [closure] in MenuItemMorph>>invokeWithEvent:	Arguments and temporary variables: 		aBlock: 	[closure] in CursorWithMask(Cursor)>>showWhile:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	MenuItemMorph>>invokeWithEvent:		startpc: 	152		numArgs: 	0CursorWithMask(Cursor)>>showWhile:	Receiver: ((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r10000000000000000000000...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in MenuItemMorph>>invokeWithEvent:		oldcursor: 	((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r1...etc...	Receiver's instance variables: 		bits: 	a Bitmap of length 16		width: 	16		height: 	16		depth: 	1		offset: 	-1@ -1		maskForm: 	Form(16x16x1)MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(3879791)'copy class'	Arguments and temporary variables: 		evt: 	[806@338 mouseUp ( red ) 292714]		w: 	a PasteUpMorph(2434915) [world]	Receiver's instance variables: 		bounds: 	768@325 corner: 918@341		owner: 	a MenuMorph(1358653)		submorphs: 	#()		fullBounds: 	768@325 corner: 918@341		color: 	Color black		extension: 	a MorphExtension (2612855) [other:  (layoutProperties -> a LayoutPro...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'copy class'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Browser		selector: 	#perform:orSendTo:		arguments: 	{#copyClass . a PluggableListMorphPlus(2733994)}		icon: 	Form(16x1x8)MenuItemMorph>>mouseUp:	Receiver: a MenuItemMorph(3879791)'copy class'	Arguments and temporary variables: 		evt: 	[806@338 mouseUp ( red ) 292714]	Receiver's instance variables: 		bounds: 	768@325 corner: 918@341		owner: 	a MenuMorph(1358653)		submorphs: 	#()		fullBounds: 	768@325 corner: 918@341		color: 	Color black		extension: 	a MorphExtension (2612855) [other:  (layoutProperties -> a LayoutPro...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'copy class'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Browser		selector: 	#perform:orSendTo:		arguments: 	{#copyClass . a PluggableListMorphPlus(2733994)}		icon: 	Form(16x1x8)MenuItemMorph>>handleMouseUp:	Receiver: a MenuItemMorph(3879791)'copy class'	Arguments and temporary variables: 		anEvent: 	[806@338 mouseUp ( red ) 292714]	Receiver's instance variables: 		bounds: 	768@325 corner: 918@341		owner: 	a MenuMorph(1358653)		submorphs: 	#()		fullBounds: 	768@325 corner: 918@341		color: 	Color black		extension: 	a MorphExtension (2612855) [other:  (layoutProperties -> a LayoutPro...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'copy class'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Browser		selector: 	#perform:orSendTo:		arguments: 	{#copyClass . a PluggableListMorphPlus(2733994)}		icon: 	Form(16x1x8)MouseButtonEvent>>sentTo:	Receiver: [806@338 mouseUp ( red ) 292714]	Arguments and temporary variables: 		anObject: 	a MenuItemMorph(3879791)'copy class'	Receiver's instance variables: 		timeStamp: 	292714		source: 	a HandMorph(531677)		type: 	#mouseUp		buttons: 	0		position: 	806@338		handler: 	nil		wasHandled: 	true		wasIgnored: 	false		whichButton: 	4MenuItemMorph(Morph)>>handleEvent:	Receiver: a MenuItemMorph(3879791)'copy class'	Arguments and temporary variables: 		anEvent: 	[806@338 mouseUp ( red ) 292714]		filteredEvent: 	[806@338 mouseUp ( red ) 292714]	Receiver's instance variables: 		bounds: 	768@325 corner: 918@341		owner: 	a MenuMorph(1358653)		submorphs: 	#()		fullBounds: 	768@325 corner: 918@341		color: 	Color black		extension: 	a MorphExtension (2612855) [other:  (layoutProperties -> a LayoutPro...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'copy class'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Browser		selector: 	#perform:orSendTo:		arguments: 	{#copyClass . a PluggableListMorphPlus(2733994)}		icon: 	Form(16x1x8)MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:	Receiver: a MorphicEventDispatcher	Arguments and temporary variables: 		anEvent: 	[806@338 mouseUp ( red ) 292714]		aHandler: 	a MenuItemMorph(3879791)'copy class'		aMorph: 	a MenuItemMorph(3879791)'copy class'		result: 	#rejected		filteredEvent: 	[806@338 mouseUp ( red ) 292714]	Receiver's instance variables: 		lastType: 	#mouseUp		lastDispatch: 	#dispatchDefault:with:MorphicEventDispatcher>>dispatchDefault:with:	Receiver: a MorphicEventDispatcher	Arguments and temporary variables: 		anEvent: 	[806@338 mouseUp ( red ) 292714]		aMorph: 	a MenuItemMorph(3879791)'copy class'	Receiver's instance variables: 		lastType: 	#mouseUp		lastDispatch: 	#dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:	Receiver: a MorphicEventDispatcher	Arguments and temporary variables: 		anEvent: 	[806@338 mouseUp ( red ) 292714]		aMorph: 	a MenuItemMorph(3879791)'copy class'	Receiver's instance variables: 		lastType: 	#mouseUp		lastDispatch: 	#dispatchDefault:with:MenuItemMorph(Morph)>>processEvent:using:	Receiver: a MenuItemMorph(3879791)'copy class'	Arguments and temporary variables: 		anEvent: 	[806@338 mouseUp ( red ) 292714]		defaultDispatcher: 	a MorphicEventDispatcher		filteredEvent: 	[806@338 mouseUp ( red ) 292714]	Receiver's instance variables: 		bounds: 	768@325 corner: 918@341		owner: 	a MenuMorph(1358653)		submorphs: 	#()		fullBounds: 	768@325 corner: 918@341		color: 	Color black		extension: 	a MorphExtension (2612855) [other:  (layoutProperties -> a LayoutPro...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'copy class'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Browser		selector: 	#perform:orSendTo:		arguments: 	{#copyClass . a PluggableListMorphPlus(2733994)}		icon: 	Form(16x1x8)[] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:	Receiver: a MorphicEventDispatcher	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		lastType: 	#mouseUp		lastDispatch: 	#dispatchDefault:with:Array(SequenceableCollection)>>do:	Receiver: {a MenuItemMorph(3391937)'browse mc history' . a Morph<line>(3509999) . a MenuItemMorph(38...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:		index: 	20		indexLimiT: 	26	Receiver's instance variables: {a MenuItemMorph(3391937)'browse mc history' . a Morph<line>(3509999) . a MenuItemMorph(38...etc...MenuMorph(Morph)>>submorphsDo:	Receiver: a MenuMorph(1358653)	Arguments and temporary variables: 		aBlock: 	[closure] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:	Receiver's instance variables: 		bounds: 	764@87 corner: 922@417		owner: 	nil		submorphs: 	{a MenuItemMorph(3391937)'browse mc history' . a Morph<line>(3509999...etc...		fullBounds: 	754@79 corner: 932@429		color: 	(Color r: 0.9 g: 0.9 b: 0.9)		extension: 	a MorphExtension (2624281) [other:  (layoutPolicy -> a TableLayout) ...etc...		defaultTarget: 	a Browser		selectedItem: 	nil		stayUp: 	false		popUpOwner: 	nil		activeSubMenu: 	nil		originalFocusHolder: 	nilMorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:	Receiver: a MorphicEventDispatcher	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		lastType: 	#mouseUp		lastDispatch: 	#dispatchDefault:with:--- The full stack ---Browser(Object)>>error:Browser>>copyClassBrowser(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:BlockClosure>>ensure:CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:[] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:Array(SequenceableCollection)>>do:MenuMorph(Morph)>>submorphsDo:MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>doProcessingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEventFully:with:MenuMorph>>processFocusEvent:using:MenuMorph(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in MorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess