DuplicateVariableError: image is already defined in ImageMorph22 March 2017 3:21:59.054301 pmVM: Mac OS - SmalltalkImage: Squeak5.1 [latest update: #16549]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/Daniel/Documents/College/Object Oriented Dev/CalculationSolitareTrusted Dir /Users/Daniel/Library/Application Support/Squeak/Untrusted Dir /Users/Daniel/Documents/Squeak/[] in ClassBuilder>>validateInstvars:from:forSuper:	Receiver: a ClassBuilder	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilArray(SequenceableCollection)>>do:	Receiver: #('image')	Arguments and temporary variables: 		aBlock: 	[closure] in ClassBuilder>>validateInstvars:from:forSuper:		index: 	1		indexLimiT: 	1	Receiver's instance variables: #('image')ClassBuilder>>validateInstvars:from:forSuper:	Receiver: a ClassBuilder	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nil[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:	Receiver: a ClassBuilder	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilBlockClosure>>ensure:	Receiver: [closure] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:...etc...		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:...etc...		startpc: 	332		numArgs: 	0ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:	Receiver: a ClassBuilder	Arguments and temporary variables: 		className: 	#Card		env: 	Smalltalk		newSuper: 	ImageMorph		type: 	#normal		instVarString: 	'image'		classVarString: 	'DefaultForm'		poolString: 	''		category: 	'Morphic-Basic'		unsafe: 	false		oldClass: 	nil		instVars: 	#('image')		classVars: 	#(#DefaultForm)		copyOfOldClass: 	nil		newClass: 	#(nil)	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:	Receiver: a ClassBuilder	Arguments and temporary variables: 		className: 	#Card		env: 	Smalltalk		newSuper: 	ImageMorph		type: 	#normal		instVarString: 	'image'		classVarString: 	'DefaultForm'		poolString: 	''		category: 	'Morphic-Basic'	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:	Receiver: a ClassBuilder	Arguments and temporary variables: 		newSuper: 	ImageMorph		t: 	#Card		f: 	'image'		d: 	'DefaultForm'		s: 	''		cat: 	'Morphic-Basic'		env: 	Smalltalk	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilImageMorph class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:	Receiver: ImageMorph	Arguments and temporary variables: 		t: 	#Card		f: 	'image'		d: 	'DefaultForm'		s: 	''		cat: 	'Morphic-Basic'	Receiver's instance variables: 		superclass: 	Morph		methodDict: 	a MethodDictionary(#addCustomMenuItems:hand:->(ImageMorph>>#addCust...etc...		format: 	65543		instanceVariables: 	#('image')		organization: 	('accessing' borderStyle: borderWidth: color: form image image: isOpaque...etc...		subclasses: 	{PaintBoxColorPicker . PaintInvokingMorph . Sonogram . GrabPatchMorph...etc...		name: 	#ImageMorph		classPool: 	a Dictionary(#DefaultForm->Form(80x40x16) )		sharedPools: 	nil		environment: 	nil		category: 	#'Morphic-Basic'UndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ ImageMorph		subclass: #Card		instanceVariableNames: 'imag...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1299778)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler class>>evaluate:for:notifying:logged:		logFlag: 	false		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	'ImageMorph subclass: #Card	instanceVariableNames: ''image''	cl...etc...		aContext: 	nil		receiver: 	nil		aRequestor: 	a PluggableTextMorphPlus(1392092)		failBlock: 	[closure] in Compiler class>>evaluate:for:notifying:logged:		logFlag: 	false		theClass: 	UndefinedObject	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler class>>evaluate:for:notifying:logged:	Receiver: Compiler	Arguments and temporary variables: 		textOrString: 	'ImageMorph subclass: #Card	instanceVariableNames: ''image''	cl...etc...		anObject: 	nil		aController: 	a PluggableTextMorphPlus(1392092)		logFlag: 	false	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary(#compile:ifFail:->(Compiler>>#compile:ifFail: "a...etc...		format: 	65538		instanceVariables: 	#('parser' 'cue')		organization: 	('public access' compile:ifFail: compile:in:notifying:ifFail: compileNoPattern:in:context:notifying:ifFail:...etc...		subclasses: 	nil		name: 	#Compiler		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Compiler-Kernel'Compiler class>>evaluate:notifying:logged:	Receiver: Compiler	Arguments and temporary variables: 		textOrString: 	'ImageMorph subclass: #Card	instanceVariableNames: ''image''	cl...etc...		aController: 	a PluggableTextMorphPlus(1392092)		logFlag: 	false	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary(#compile:ifFail:->(Compiler>>#compile:ifFail: "a...etc...		format: 	65538		instanceVariables: 	#('parser' 'cue')		organization: 	('public access' compile:ifFail: compile:in:notifying:ifFail: compileNoPattern:in:context:notifying:ifFail:...etc...		subclasses: 	nil		name: 	#Compiler		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Compiler-Kernel'Browser>>defineClass:notifying:	Receiver: a Browser	Arguments and temporary variables: 		defString: 	'ImageMorph subclass: #Card	instanceVariableNames: ''image''	class...etc...		aController: 	a PluggableTextMorphPlus(1392092)		oldClass: 	Morph		class: 	nil		newClassName: 	'Card'		defTokens: 	an OrderedCollection('ImageMorph' 'subclass:' '#Card' 'instanceVaria...etc...		keywdIx: 	2		envt: 	Smalltalk	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser: ImageMorp...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	nil		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	('accessing' borderStyle: borderWidth: color: form image image:...etc...		metaClassOrganizer: 	('accessing' defaultForm)('class initialization' initialize...etc...		editSelection: 	#editClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Morphic-Basic'		selectedClassName: 	#ImageMorph		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	'Morph subclass: #ImageMorph	instanceVariableNames: ''image''...etc...		metaClassDefinition: 	'ImageMorph class	instanceVariableNames: '''''Browser>>contents:notifying:	Receiver: a Browser	Arguments and temporary variables: 		input: 	a Text for 'ImageMorph subclass: #Card	instanceVariableNames: ''image''...etc...		aController: 	a PluggableTextMorphPlus(1392092)		aString: 	'ImageMorph subclass: #Card	instanceVariableNames: ''image''	classVa...etc...		aText: 	a Text for 'ImageMorph subclass: #Card	instanceVariableNames: ''image''...etc...		theClass: 	nil	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser: ImageMorp...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	nil		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	('accessing' borderStyle: borderWidth: color: form image image:...etc...		metaClassOrganizer: 	('accessing' defaultForm)('class initialization' initialize...etc...		editSelection: 	#editClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Morphic-Basic'		selectedClassName: 	#ImageMorph		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	'Morph subclass: #ImageMorph	instanceVariableNames: ''image''...etc...		metaClassDefinition: 	'ImageMorph class	instanceVariableNames: '''''[] in PluggableTextMorphPlus>>acceptTextInModel	Receiver: a PluggableTextMorphPlus(1392092)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	627@359 corner: 1253@608		owner: 	a PluggablePanelMorph(2468348)		submorphs: 	{a TransformMorph(1613667)}		fullBounds: 	627@359 corner: 1253@608		color: 	Color white		extension: 	a MorphExtension (3243454) [other:  (layoutProperties -> a LayoutPro...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Browser		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(3558694)		scroller: 	a TransformMorph(1613667)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	true		hScrollBar: 	a ScrollBar(209724)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(3867729)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(116 to: 115)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	a Text for 'ImageMorph subclass: #Card	instanceVariableNam...etc...		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilBlockClosure>>ensure:	Receiver: [closure] in PluggableTextMorphPlus>>acceptTextInModel	Arguments and temporary variables: 		aBlock: 	[closure] in PluggableTextMorphPlus>>acceptTextInModel		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	PluggableTextMorphPlus>>acceptTextInModel		startpc: 	81		numArgs: 	0--- The full stack ---[] in ClassBuilder>>validateInstvars:from:forSuper:Array(SequenceableCollection)>>do:ClassBuilder>>validateInstvars:from:forSuper:[] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:BlockClosure>>ensure:ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:ImageMorph class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:UndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:logged:Compiler class>>evaluate:for:notifying:logged:Compiler class>>evaluate:notifying:logged:Browser>>defineClass:notifying:Browser>>contents:notifying:[] in PluggableTextMorphPlus>>acceptTextInModelBlockClosure>>ensure: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -PluggableTextMorphPlus>>acceptTextInModelPluggableTextMorphPlus(PluggableTextMorph)>>acceptPluggableTextMorphPlus>>acceptBrowser(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:BlockClosure>>ensure:CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:[] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:Array(SequenceableCollection)>>do:MenuMorph(Morph)>>submorphsDo:MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>doProcessingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEventFully:with:MenuMorph>>processFocusEvent:using:MenuMorph(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents-- and more not shown --