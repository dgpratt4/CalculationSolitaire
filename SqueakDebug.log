Error: attempt to index a non-existent element in an OrderedCollection12 April 2017 12:25:32.04066 pmVM: Mac OS - SmalltalkImage: Squeak5.1 [latest update: #16549]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/Daniel/Documents/College/Object Oriented Dev/CalculationSolitareTrusted Dir /Users/Daniel/Library/Application Support/Squeak/Untrusted Dir /Users/Daniel/Documents/Squeak/OrderedCollection(Object)>>error:	Receiver: an OrderedCollection('Choose another name' 'Debug' 'Cancel')	Arguments and temporary variables: 		aString: 	'attempt to index a non-existent element in an OrderedCollection'	Receiver's instance variables: 		array: 	#('Choose another name' 'Debug' 'Cancel' nil nil nil nil nil nil nil)		firstIndex: 	1		lastIndex: 	3OrderedCollection>>errorNoSuchElement	Receiver: an OrderedCollection('Choose another name' 'Debug' 'Cancel')	Arguments and temporary variables: 	Receiver's instance variables: 		array: 	#('Choose another name' 'Debug' 'Cancel' nil nil nil nil nil nil nil)		firstIndex: 	1		lastIndex: 	3OrderedCollection>>at:	Receiver: an OrderedCollection('Choose another name' 'Debug' 'Cancel')	Arguments and temporary variables: 		anInteger: 	0		index: 	nil	Receiver's instance variables: 		array: 	#('Choose another name' 'Debug' 'Cancel' nil nil nil nil nil nil nil)		firstIndex: 	1		lastIndex: 	3StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:ifDebug:	Receiver: StandardFileStream	Arguments and temporary variables: 		fullFileName: 	'/Users/Daniel/Documents/College/Object Oriented Dev/CalculationS...etc...		debugBlock: 	[closure] in FileDoesNotExistException>>defaultAction		dir: 	UnixFileDirectory on '/Users/Daniel/Documents/College/Object Oriented Dev/...etc...		files: 	#('.DS_Store' 'CalculationSolitaire.changes' 'CalculationSolitaire.image...etc...		choices: 	an OrderedCollection('Choose another name' 'Debug' 'Cancel')		selection: 	0		newName: 	nil		fileName: 	'Assets\CardFaces\1-2.png'	Receiver's instance variables: 		superclass: 	FileStream		methodDict: 	a MethodDictionary(#<<->(StandardFileStream>>#<< "a CompiledMethod(...etc...		format: 	65546		instanceVariables: 	#('name' 'fileID' 'buffer1' 'lastWritten')		organization: 	('access' directory directoryUrl file fullName isDirectory localName...etc...		subclasses: 	{CrLfFileStream . MultiByteFileStream}		name: 	#StandardFileStream		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Files-Kernel'FileDoesNotExistException>>defaultAction	Receiver: FileDoesNotExistException: '/Users/Daniel/Documents/College/Object Oriented Dev/Calculatio...etc...	Arguments and temporary variables: 	Receiver's instance variables: 		messageText: 	nil		tag: 	nil		signalContext: 	FileDoesNotExistException(Exception)>>signal		handlerContext: 	nil		outerContext: 	nil		fileName: 	'/Users/Daniel/Documents/College/Object Oriented Dev/CalculationSolit...etc...		readOnly: 	trueUndefinedObject>>handleSignal:	Receiver: nil	Arguments and temporary variables: 		exception: 	FileDoesNotExistException: '/Users/Daniel/Documents/College/Object O...etc...	Receiver's instance variables: nilMethodContext(ContextPart)>>handleSignal:	Receiver: BlockClosure>>on:do:	Arguments and temporary variables: 		exception: 	FileDoesNotExistException: '/Users/Daniel/Documents/College/Object O...etc...		handlerActive: 	true		val: 	nil	Receiver's instance variables: 		sender: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		pc: 	20		stackp: 	3		method: 	(BlockClosure>>#on:do: "a CompiledMethod(1997311)")		closureOrNil: 	nil		receiver: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:FileDoesNotExistException(Exception)>>signal	Receiver: FileDoesNotExistException: '/Users/Daniel/Documents/College/Object Oriented Dev/Calculatio...etc...	Arguments and temporary variables: 	Receiver's instance variables: 		messageText: 	nil		tag: 	nil		signalContext: 	FileDoesNotExistException(Exception)>>signal		handlerContext: 	nil		outerContext: 	nil		fileName: 	'/Users/Daniel/Documents/College/Object Oriented Dev/CalculationSolit...etc...		readOnly: 	trueMultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:	Receiver: MultiByteFileStream	Arguments and temporary variables: 		fileName: 	'/Users/Daniel/Documents/College/Object Oriented Dev/CalculationSolit...etc...		fullName: 	'/Users/Daniel/Documents/College/Object Oriented Dev/CalculationSolit...etc...		f: 	nil	Receiver's instance variables: 		superclass: 	StandardFileStream		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a CompiledMethod...etc...		format: 	65549		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')		organization: 	('accessing' ascii binary converter converter: fileInEncodingName:...etc...		subclasses: 	nil		name: 	#MultiByteFileStream		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'
' #Lf->Character lf #LineEndDefault...etc...		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Multilingual-TextConversion'FileStream class>>readOnlyFileNamed:	Receiver: FileStream	Arguments and temporary variables: 		fileName: 	'Assets\CardFaces\1-2.png'	Receiver's instance variables: 		superclass: 	ReadWriteStream		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...		format: 	65542		instanceVariables: 	#('rwmode')		organization: 	('accessing' contents contentsOfEntireFile directoryEntry mimeTypes...etc...		subclasses: 	{StandardFileStream}		name: 	#FileStream		classPool: 	a Dictionary(#EncodeAndDecodeStdioFiles->true #Stderr->nil #Stdin->n...etc...		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Files-Kernel'Form class>>fromFileNamed:	Receiver: Form	Arguments and temporary variables: 		fileName: 	'Assets\CardFaces\1-2.png'		file: 	nil		form: 	nil	Receiver's instance variables: 		superclass: 	DisplayMedium		methodDict: 	a MethodDictionary(size 236)		format: 	65541		instanceVariables: 	#('bits' 'width' 'height' 'depth' 'offset')		organization: 	('accessing' bits bitsSize bits: defaultCanvasClass depth depth: displayScreen...etc...		subclasses: 	{Cursor . ColorForm . StaticForm . FormStub . DisplayScreen}		name: 	#Form		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	nil		category: 	#'Graphics-Display Objects'Deck>>initialize	Receiver: a Deck	Arguments and temporary variables: 		tempArray: 	{a Card(2296919) . nil . nil . nil . nil . nil . nil . nil . nil . n...etc...		count: 	2		value: 	2		suit: 	1		index: 	nil	Receiver's instance variables: 		linkedList: 	a LinkedList()Deck class(Behavior)>>new	Receiver: Deck	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	Stack		methodDict: 	a MethodDictionary(#drawCard->(Deck>>#drawCard "a CompiledMethod(94...etc...		format: 	65537		instanceVariables: 	nil		organization: 	('as yet unclassified' drawCard initialize)		subclasses: 	nil		name: 	#Deck		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Collections-Stack'UndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	board := BoardWindow new.	board addMorph: DeckPile new.	dec...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1018623)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		theClass: 	UndefinedObject	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(146157)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $b and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 123 and rectangle 123@128 corner: 123@1...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(104 to: 103)		oldInterval: 	(123 to: 122)		typeAhead: 	nil		history: 	a TextEditorCommandHistory		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	133		numArgs: 	0--- The full stack ---OrderedCollection(Object)>>error:OrderedCollection>>errorNoSuchElementOrderedCollection>>at:StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:ifDebug:FileDoesNotExistException>>defaultActionUndefinedObject>>handleSignal:MethodContext(ContextPart)>>handleSignal:FileDoesNotExistException(Exception)>>signalMultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:FileStream class>>readOnlyFileNamed:Form class>>fromFileNamed:Deck>>initializeDeck class(Behavior)>>newUndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>evaluateSelection[] in PluggableTextMorphPlus(PluggableTextMorph)>>doItTextMorphForEditView(TextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>doItWorkspace(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:BlockClosure>>ensure:CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:[] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:Array(SequenceableCollection)>>do:MenuMorph(Morph)>>submorphsDo:MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>doProcessingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEventFully:with:MenuMorph>>processFocusEvent:using:MenuMorph(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:-- and more not shown --