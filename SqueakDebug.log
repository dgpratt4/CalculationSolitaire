MessageNotUnderstood: UndefinedObject>>position:13 April 2017 8:38:18.897313 pmVM: Win32 - SmalltalkImage: Squeak5.1 [latest update: #16549]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\Users\zmunson.3PDELIVERY\Source\Repos\CalculationSolitaireTrusted Dir C:\Users\zmunson.3PDELIVERY\Source\Repos\CalculationSolitaire\zmunsonUntrusted Dir C:\Users\zmunson.3PDELIVERY\Documents\My SqueakUndefinedObject(Object)>>doesNotUnderstand: #position:	Receiver: nil	Arguments and temporary variables: 		aMessage: 	position: 500@275		exception: 	MessageNotUnderstood: UndefinedObject>>position:		resumeValue: 	nil	Receiver's instance variables: nilWastePile>>pilePosition:	Receiver: a WastePile	Arguments and temporary variables: 		aPos: 	500@275	Receiver's instance variables: 		cardStack: 	a Stack		pilePosition: 	500@275		wasteImage: 	an ImageMorph(2416731)BoardWindow>>initialize	Receiver: a BoardWindow<Untitled Window>(373737)	Arguments and temporary variables: 		tempArray: 	{a Card(2690221) . a Card(4150984) . a Card(1745412) . a Card(186761...etc...		count: 	53		fndValues: 	#(nil nil nil nil)		fndCards: 	{a Card(1288802) . a Card(1518811) . a Card(138089) . a Card(1745412)...etc...		value: 	14		suit: 	5		index: 	53		val: 	3	Receiver's instance variables: 		bounds: 	0@0 corner: 300@200		owner: 	nil		submorphs: 	{a Card(1745412) . a Card(138089) . a Card(1518811) . a Card(1288802...etc...		fullBounds: 	nil		color: 	(Color r: 0.0 g: 0.7 b: 0.0)		extension: 	a MorphExtension (3152128) [other:  (allowPaneSplitters -> true) (la...etc...		borderWidth: 	1		borderColor: 	Color yellow		model: 	nil		slotName: 	nil		open: 	false		labelString: 	'Untitled Window'		stripes: 	{a RectangleMorph(2755111) . a RectangleMorph(43870)}		label: 	a StringMorph(3335646)'Untitled Window'		closeBox: 	a SystemWindowButton(1144511)		collapseBox: 	a SystemWindowButton(733989)		paneMorphs: 	#()		paneRects: 	nil		collapsedFrame: 	nil		fullFrame: 	nil		isCollapsed: 	false		isActive: 	nil		isLookingFocused: 	nil		menuBox: 	a SystemWindowButton(526588)		mustNotClose: 	false		labelWidgetAllowance: 	83		updatablePanes: 	#()		allowReframeHandles: 	true		labelArea: 	an AlignmentMorph(3804771)		expandBox: 	a SystemWindowButton(436866)		deck: 	a DeckPile		foundation1: 	a FoundationPile		foundation2: 	a FoundationPile		foundation3: 	a FoundationPile		foundation4: 	a FoundationPile		waste1: 	nil		waste2: 	nil		waste3: 	nil		waste4: 	nilBoardWindow class(Behavior)>>new	Receiver: BoardWindow	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	SystemWindow		methodDict: 	a MethodDictionary(#defaultColor->(BoardWindow>>#defaultColor "a CompiledMethod...etc...		format: 	65575		instanceVariables: 	#('deck' 'foundation1' 'foundation2' 'foundation3' 'foundati...etc...		organization: 	('as yet unclassified' defaultColor extent: initialize)		subclasses: 	nil		name: 	#BoardWindow		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'CS-Objects'		prototype: 	nilBoardWindow class(MorphicModel class)>>new	Receiver: BoardWindow	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	SystemWindow		methodDict: 	a MethodDictionary(#defaultColor->(BoardWindow>>#defaultColor "a CompiledMethod...etc...		format: 	65575		instanceVariables: 	#('deck' 'foundation1' 'foundation2' 'foundation3' 'foundati...etc...		organization: 	('as yet unclassified' defaultColor extent: initialize)		subclasses: 	nil		name: 	#BoardWindow		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'CS-Objects'		prototype: 	nilUndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	board := BoardWindow new extent: 1280 @ 720.	^ board openInWorld...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(236818)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		theClass: 	UndefinedObject	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(146157)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $b and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 62 and rectangle 123@16 corner: 123@32...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(44 to: 61)		oldInterval: 	(62 to: 61)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	133		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelection		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(146157)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $b and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 62 and rectangle 123@16 corner: 123@32...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(44 to: 61)		oldInterval: 	(62 to: 61)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>evaluateSelection	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(146157)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $b and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 62 and rectangle 123@16 corner: 123@32...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(44 to: 61)		oldInterval: 	(62 to: 61)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nil[] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(43874)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	12@54 corner: 422@411		owner: 	a PluggableSystemWindow<Workspace>(1707113)		submorphs: 	{a TransformMorph(2808615)}		fullBounds: 	12@54 corner: 422@411		color: 	Color white		extension: 	a MorphExtension (1418546) [other:  (layoutProperties -> a LayoutPro...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(1087089)		scroller: 	a TransformMorph(2808615)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	true		hScrollBar: 	a ScrollBar(325002)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(146157)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 61)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilTextMorphForEditView(TextMorph)>>handleEdit:	Receiver: a TextMorphForEditView(146157)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 408@34		owner: 	a TransformMorph(2808615)		submorphs: 	#()		fullBounds: 	0@0 corner: 408@34		color: 	Color black		extension: 	a MorphExtension (2646121) [other:  (caretColor -> Color red) (selec...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'board := BoardWindow new extent: 1280@720.board openInWorld....etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(43874)		acceptOnCR: 	falsePluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:	Receiver: a PluggableTextMorphPlus(43874)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	12@54 corner: 422@411		owner: 	a PluggableSystemWindow<Workspace>(1707113)		submorphs: 	{a TransformMorph(2808615)}		fullBounds: 	12@54 corner: 422@411		color: 	Color white		extension: 	a MorphExtension (1418546) [other:  (layoutProperties -> a LayoutPro...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(1087089)		scroller: 	a TransformMorph(2808615)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	true		hScrollBar: 	a ScrollBar(325002)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(146157)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 61)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilPluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(43874)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	12@54 corner: 422@411		owner: 	a PluggableSystemWindow<Workspace>(1707113)		submorphs: 	{a TransformMorph(2808615)}		fullBounds: 	12@54 corner: 422@411		color: 	Color white		extension: 	a MorphExtension (1418546) [other:  (layoutProperties -> a LayoutPro...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(1087089)		scroller: 	a TransformMorph(2808615)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	true		hScrollBar: 	a ScrollBar(325002)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(146157)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 61)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilWorkspace(StringHolder)>>perform:orSendTo:	Receiver: a Workspace	Arguments and temporary variables: 		selector: 	#doIt		otherTarget: 	a PluggableTextMorphPlus(43874)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<Workspace>(1707113) a PluggableTextMorphPlus...etc...		contents: 	a Text for 'board := BoardWindow new extent: 1280@720.board openInWo...etc...		bindings: 	a Dictionary('back1'->an AnObsoleteCardBack(174018) 'board'->a BoardWindow...etc...		acceptDroppedMorphs: 	false		acceptAction: 	nil		mustDeclareVariables: 	false		shouldStyle: 	nil[] in MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(3381435)'do it (d)'	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	117@319 corner: 266@337		owner: 	a MenuMorph(728021)		submorphs: 	#()		fullBounds: 	117@319 corner: 266@337		color: 	Color black		extension: 	a MorphExtension (46060) [other:  (layoutProperties -> a LayoutPrope...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'do it (d)'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Workspace		selector: 	#perform:orSendTo:		arguments: 	{#doIt . a PluggableTextMorphPlus(43874)}		icon: 	Form(16x16x32)--- The full stack ---UndefinedObject(Object)>>doesNotUnderstand: #position:WastePile>>pilePosition:BoardWindow>>initializeBoardWindow class(Behavior)>>newBoardWindow class(MorphicModel class)>>newUndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>evaluateSelection[] in PluggableTextMorphPlus(PluggableTextMorph)>>doItTextMorphForEditView(TextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>doItWorkspace(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -BlockClosure>>ensure:CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:[] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:Array(SequenceableCollection)>>do:MenuMorph(Morph)>>submorphsDo:MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>doProcessingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEventFully:with:MenuMorph>>processFocusEvent:using:MenuMorph(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:-- and more not shown --